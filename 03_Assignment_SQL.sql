-- TABLES
DROP TABLE MEMBER;
DROP TABLE BOOKS;
DROP TABLE ISSUE;

CREATE TABLE MEMBER (
    MEMBER_ID NUMBER(5) PRIMARY KEY,
    MEMBER_NAME VARCHAR2(30),
    MEMBER_ADDRESS VARCHAR2(50),
    ACC_OPEN_DATE DATE,
    MEMBERSHIP_TYPE VARCHAR2(20) CHECK (MEMBERSHIP_TYPE IN ('Lifetime','Annual', 'Half Yearly', 'Quarterly')),
    FEES_PAID NUMBER(8),
    MAX_BOOKS_ALLOWED NUMBER(2),
    PENALTY_AMOUNT NUMBER(7, 2)
);

INSERT INTO MEMBER VALUES (1, 'Richa Sharma', 'Pune', '10-Dec-2025', 'Lifetime', 25000, 5, 50); 
INSERT INTO MEMBER VALUES (2, 'Garima Sen', 'Pune', (SELECT CURRENT_DATE FROM DUAL), 'Annual', 1000, 3, NULL);
INSERT INTO MEMBER VALUES (3, 'Amit Sharma', 'Bangalore', TO_DATE('2024-06-05', 'YYYY-MM-DD'), 'Quarterly', 1200, 4, 25);
INSERT INTO MEMBER VALUES (4, 'Priya Singh', 'Chennai', TO_DATE('2024-07-20', 'YYYY-MM-DD'), 'Annual', 5000, 10, 0);
INSERT INTO MEMBER VALUES (5, 'Arjun Mehta', 'Kolkata', TO_DATE('2024-09-01', 'YYYY-MM-DD'), 'Half Yearly', 2500, 6, 10);
INSERT INTO MEMBER VALUES (6, 'Neha Verma', 'Hyderabad', TO_DATE('2024-10-15', 'YYYY-MM-DD'), 'Annual', 5000, 10, 0);
INSERT INTO MEMBER VALUES (7, 'Rahul Nair', 'Pune', TO_DATE('2024-11-05', 'YYYY-MM-DD'), 'Quarterly', 1200, 4, 30);

SELECT * FROM MEMBER;


CREATE TABLE BOOKS (
    BOOK_NO NUMBER(6) PRIMARY KEY,
    BOOK_NAME VARCHAR2(30) NOT NULL,
    AUTHOR_NAME VARCHAR2(30),
    COST NUMBER(7, 2),
    CATEGORY CHAR(10) CHECK (CATEGORY IN ('System', 'Science', 'Fiction', 'Database', 'RDBMS', 'Others'))
);


INSERT INTO BOOKS VALUES (101, 'Let us C', 'Denis Ritche', 450, 'System');
INSERT INTO BOOKS VALUES (102, 'Oracle Complete Ref', 'Loni', 550, 'Database');
INSERT INTO BOOKS VALUES (103, 'Mastering SQL', 'Loni', 250, 'Database');
INSERT INTO BOOKS VALUES (104, 'PL SQL Ref', 'Scott Urman', 750, 'Database');
INSERT INTO BOOKS VALUES (105, 'Introduction to Databases', 'C. J. Date', 550, 'Database');
INSERT INTO BOOKS VALUES (106, 'Operating System Concepts', 'Silberschatz', 750, 'System');
INSERT INTO BOOKS VALUES (107, 'Brief History of Time', 'Stephen Hawking', 600, 'Science');
INSERT INTO BOOKS VALUES (108, 'The Great Gatsby', 'F. Scott Fitzgerald', 400, 'Fiction');
INSERT INTO BOOKS VALUES (109, 'Learning Oracle RDBMS', 'Thomas Connolly', 680, 'RDBMS');

SELECT * FROM BOOKS;

CREATE TABLE ISSUE (
    LIB_ISSUE_ID NUMBER(10) PRIMARY KEY,
    BOOK_NO NUMBER(6),
    MEMBER_ID NUMBER(5),
    ISSUE_DATE DATE,
    RETURN_DATE DATE,
    CONSTRAINT FK_ISSUE_BOOK FOREIGN KEY (BOOK_NO) REFERENCES BOOKS(BOOK_NO),
    CONSTRAINT FK_ISSUE_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID)
);

INSERT INTO ISSUE VALUES (7001, 101, 1, '10-Dec-2006', NULL);
INSERT INTO ISSUE VALUES (7002, 102, 2, '26-Dec-2006', NULL);
INSERT INTO ISSUE VALUES (7003, 104, 1, '15-Jan-2006', NULL);
INSERT INTO ISSUE VALUES (7004, 101, 1, '04-Jul-2006', NULL);
INSERT INTO ISSUE VALUES (7005, 104, 2, '15-Nov-2006', NULL);
INSERT INTO ISSUE VALUES (7006, 101, 3, '18-Feb-2006', NULL);


SELECT * FROM ISSUE;


-- ASSIGNMENT 03

-- 1)
SELECT CATEGORY, COUNT(CATEGORY) AS COUNT FROM BOOKS GROUP BY CATEGORY ORDER BY COUNT(CATEGORY) DESC;

-- 2)
SELECT BOOK_NO, COUNT(BOOK_NO) AS NO_OF_ISSUE FROM ISSUE GROUP BY BOOK_NO ORDER BY COUNT(BOOK_NO) DESC;

-- 3)
SELECT MAX(PENALTY_AMOUNT), MIN(PENALTY_AMOUNT), AVG(PENALTY_AMOUNT) FROM MEMBER;

-- 4)
SELECT MEMBER_ID, COUNT(MEMBER_ID) AS BOOKS_ISSUED FROM ISSUE GROUP BY MEMBER_ID HAVING COUNT(MEMBER_ID) > 2;

-- 5)
SELECT MEMBER_ID, BOOK_NO, COUNT(*) AS TIMES_ISSUED FROM ISSUE GROUP BY MEMBER_ID, BOOK_NO ORDER BY COUNT(*) DESC;

-- 6)
SELECT TO_CHAR(ISSUE_DATE, 'Month'), COUNT(*) FROM ISSUE GROUP BY TO_CHAR(ISSUE_DATE, 'Month') ORDER BY COUNT(*) DESC;

-- 7)
SELECT BOOK_NO FROM BOOKS WHERE BOOK_NO NOT IN (
    SELECT DISTINCT(BOOK_NO) FROM ISSUE
);

-- 8)
SELECT MEMBER_ID FROM MEMBER WHERE MEMBER_ID IN (
    SELECT DISTINCT(MEMBER_ID) FROM ISSUE 
);


-- 9) 

SELECT MEMBER_ID, COUNT(*) AS BOOKS_ISSUED,  'Highest' AS CATEGORY FROM ISSUE GROUP BY MEMBER_ID HAVING COUNT(*) = (
    SELECT MAX(COUNT(*)) FROM ISSUE GROUP BY MEMBER_ID
)
UNION ALL
SELECT MEMBER_ID, COUNT(*) AS BOOKS_ISSUED, 'Lowest' AS CATEGORY FROM ISSUE GROUP BY MEMBER_ID HAVING COUNT(*) = (
    SELECT MIN(COUNT(*)) FROM ISSUE GROUP BY MEMBER_ID
);


-- 10)
SELECT * FROM ISSUE WHERE TO_CHAR(ISSUE_DATE, 'Mon') IN ('Dec', 'Jul');


-- 11)
SELECT A.BOOK_NO, BOOK_NAME, ISSUE_DATE FROM BOOKS A, ISSUE B WHERE A.BOOK_NO = B.BOOK_NO AND TO_CHAR(ISSUE_DATE, 'MON') = 'DEC' AND CATEGORY = 'Database';


-- 12)
SELECT A.MEMBER_ID, MEMBER_NAME, COUNT(*) FROM MEMBER A, ISSUE B WHERE A.MEMBER_ID = B.MEMBER_ID GROUP BY A.MEMBER_ID, MEMBER_NAME ORDER BY COUNT(*) DESC;

-- 13)
SELECT A.BOOK_NO, BOOK_NAME, ISSUE_DATE, RETURN_DATE FROM ISSUE A, BOOKS B WHERE A.BOOK_NO = B.BOOK_NO AND MEMBER_ID = (SELECT MEMBER_ID FROM MEMBER WHERE MEMBER_NAME = 'Richa Sharma');


-- 14)
SELECT * FROM MEMBER WHERE MEMBER_ID IN (
    SELECT MEMBER_ID FROM ISSUE WHERE BOOK_NO IN (
        SELECT BOOK_NO FROM BOOKS WHERE CATEGORY = 'Database'
    )
);


-- 15)
SELECT * FROM BOOKS A WHERE COST = (
    SELECT MAX(COST) FROM BOOKS WHERE CATEGORY = A.CATEGORY
);

-- 16)
SELECT * FROM ISSUE A, MEMBER B WHERE A.MEMBER_ID = B.MEMBER_ID AND A.ISSUE_DATE NOT BETWEEN B.ACC_OPEN_DATE AND A.RETURN_DATE;

-- 17)
SELECT * FROM MEMBER WHERE MEMBER_ID IN (
    SELECT MEMBER_ID FROM ISSUE GROUP BY MEMBER_ID HAVING COUNT(*) = 1
);

-- 18)
SELECT * FROM MEMBER;
UPDATE MEMBER SET MAX_BOOKS_ALLOWED = 1 WHERE MEMBER_ID = 1;

SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MAX_BOOKS_ALLOWED, COUNT(*) AS BOOKS_ISSUED FROM MEMBER M, ISSUE I WHERE M.MEMBER_ID = I.MEMBER_ID 
    GROUP BY M.MEMBER_ID, M.MEMBER_NAME, M.MAX_BOOKS_ALLOWED HAVING COUNT(*) > M.MAX_BOOKS_ALLOWED;


-- 19)
SELECT * FROM MEMBER WHERE MEMBER_ID IN (
    SELECT MEMBER_ID FROM ISSUE WHERE BOOK_NO IN (
        SELECT BOOK_NO FROM ISSUE WHERE MEMBER_ID = (
            SELECT MEMBER_ID FROM MEMBER WHERE MEMBER_NAME LIKE '%Garima%'
        ) 
    )
) AND MEMBER_ID != (SELECT MEMBER_ID FROM MEMBER WHERE MEMBER_NAME LIKE '%Garima%');

  
-- 20)
SELECT BOOK_NAME, COST FROM BOOKS B, ISSUE I WHERE B.BOOK_NO = I.BOOK_NO AND (SELECT CURRENT_DATE FROM DUAL) - ISSUE_DATE > 30;


-- 21)
SELECT AUTHOR_NAME, BOOK_NAME FROM BOOKS B WHERE (
    SELECT COUNT(*) FROM BOOKS WHERE AUTHOR_NAME = B.AUTHOR_NAME
) > 1; 


-- 22)
SELECT M.MEMBER_ID, M.MEMBER_NAME, COUNT(*) AS BOOKS_ISSUED,  'Highest' AS CATEGORY FROM ISSUE I, MEMBER M WHERE I.MEMBER_ID = M.MEMBER_ID 
GROUP BY M.MEMBER_ID, I.MEMBER_ID, M.MEMBER_NAME HAVING COUNT(*) = (
    SELECT MAX(COUNT(*)) FROM ISSUE GROUP BY MEMBER_ID
)
UNION ALL
SELECT M.MEMBER_ID, M.MEMBER_NAME, COUNT(*) AS BOOKS_ISSUED, 'Lowest' AS CATEGORY FROM ISSUE I, MEMBER M WHERE I.MEMBER_ID = M.MEMBER_ID 
GROUP BY M.MEMBER_ID, I.MEMBER_ID, M.MEMBER_NAME HAVING COUNT(*) = (
    SELECT MIN(COUNT(*)) FROM ISSUE GROUP BY MEMBER_ID
);


-- 23)
SELECT * FROM (
    SELECT * FROM BOOKS ORDER BY COST DESC
) WHERE ROWNUM <= 3;


-- 24) 
SELECT SUM(COST) FROM BOOKS WHERE BOOK_NO IN (
    SELECT BOOK_NO FROM ISSUE WHERE RETURN_DATE IS NULL
);


-- 25)
SELECT * FROM BOOKS WHERE BOOK_NO IN (
    SELECT BOOK_NO FROM ISSUE GROUP BY BOOK_NO HAVING COUNT(*) = (
        SELECT MAX(COUNT(*)) FROM ISSUE GROUP BY BOOK_NO
    )
);


-- 26) 
SELECT  MEMBERSHIP_TYPE, COUNT(*) FROM ISSUE I, MEMBER M WHERE I.MEMBER_ID = M.MEMBER_ID GROUP BY MEMBERSHIP_TYPE 
HAVING MEMBERSHIP_TYPE = 'Lifetime';

-- OR
SELECT SUM(1) FROM ISSUE I, MEMBER M WHERE I.MEMBER_ID = M.MEMBER_ID AND MEMBERSHIP_TYPE = 'Lifetime';


-- 27)
SELECT MEMBERSHIP_TYPE, COUNT(*) FROM MEMBER GROUP BY MEMBERSHIP_TYPE;


-- 28)
SELECT MEMBER_ID, MEMBER_NAME, MEMBERSHIP_TYPE, TOTAL_ISSUES
FROM (
    SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE,
           COUNT(I.BOOK_NO) AS TOTAL_ISSUES
    FROM MEMBER M, ISSUE I WHERE M.MEMBER_ID = I.MEMBER_ID
    GROUP BY M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE
    ORDER BY TOTAL_ISSUES DESC
)
WHERE ROWNUM <= 5;


-- 29)


-- 30)
SELECT MEMBER_ID, MEMBER_NAME, ACC_OPEN_DATE FROM (
    SELECT * FROM MEMBER ORDER BY ACC_OPEN_DATE ASC
) WHERE ROWNUM <= 5;

-- 31)
SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE FROM MEMBER M, ISSUE I
WHERE M.MEMBER_ID = I.MEMBER_ID AND I.ISSUE_DATE BETWEEN 
    TO_DATE('01-DEC-2025','DD-MON-YYYY')
    AND TO_DATE('31-DEC-2025','DD-MON-YYYY');

-- 32)
SELECT DISTINCT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE FROM MEMBER M, ISSUE I
WHERE M.MEMBER_ID = I.MEMBER_ID AND I.RETURN_DATE IS NULL;


-- 33)
SELECT M2.MEMBER_ID, M2.MEMBER_NAME, M2.MEMBERSHIP_TYPE, M2.ACC_OPEN_DATE FROM MEMBER M1, MEMBER M2
WHERE M1.MEMBER_NAME LIKE '%GARIMA%' AND M1.ACC_OPEN_DATE = M2.ACC_OPEN_DATE;


-- 34)
SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE FROM MEMBER M, ISSUE I, BOOKS B
WHERE M.MEMBER_ID = I.MEMBER_ID
    AND I.BOOK_NO = B.BOOK_NO
    AND LOWER(B.AUTHOR_NAME) = '%loni%'
    AND TO_CHAR(I.ISSUE_DATE, 'Mon') = 'Dec';

-- 35)
SELECT B.AUTHOR_NAME, COUNT(*) AS TOTAL_ISSUES
FROM MEMBER M, ISSUE I, BOOKS B
WHERE M.MEMBER_ID = I.MEMBER_ID
  AND I.BOOK_NO = B.BOOK_NO
  AND M.MEMBERSHIP_TYPE = 'Lifetime'
GROUP BY B.AUTHOR_NAME
HAVING COUNT(*) = (
    SELECT MIN(CNT)
    FROM (
        SELECT COUNT(*) AS CNT
        FROM MEMBER M2, ISSUE I2, BOOKS B2
        WHERE M2.MEMBER_ID = I2.MEMBER_ID
          AND I2.BOOK_NO = B2.BOOK_NO
          AND M2.MEMBERSHIP_TYPE = 'Lifetime'
        GROUP BY B2.AUTHOR_NAME
    )
);


-- 36)
SELECT AUTHOR_NAME, TOTAL_ISSUES
FROM (
    SELECT B.AUTHOR_NAME, COUNT(*) AS TOTAL_ISSUES
    FROM MEMBER M, ISSUE I, BOOKS B
    WHERE M.MEMBER_ID = I.MEMBER_ID
      AND I.BOOK_NO = B.BOOK_NO
      AND M.MEMBERSHIP_TYPE = 'Half Yearly'
    GROUP BY B.AUTHOR_NAME
    ORDER BY TOTAL_ISSUES DESC
)
WHERE ROWNUM <= 3;


-- 37)
SELECT BOOK_NO, BOOK_NAME, AUTHOR_NAME, TOTAL_ISSUES
FROM (
    SELECT B.BOOK_NO, B.BOOK_NAME, B.AUTHOR_NAME, COUNT(*) AS TOTAL_ISSUES
    FROM MEMBER M, ISSUE I, BOOKS B
    WHERE M.MEMBER_ID = I.MEMBER_ID
      AND I.BOOK_NO = B.BOOK_NO
      AND M.MEMBERSHIP_TYPE = 'Annual'
    GROUP BY B.BOOK_NO, B.BOOK_NAME, B.AUTHOR_NAME
    ORDER BY TOTAL_ISSUES DESC
)
WHERE ROWNUM <= 5;


-- 38)
SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE
FROM MEMBER M, ISSUE I, BOOKS B
WHERE M.MEMBER_ID = I.MEMBER_ID
  AND I.BOOK_NO = B.BOOK_NO
  AND B.COST > 300
  AND B.AUTHOR_NAME = 'Scott Urman';


-- 39)
SELECT M.MEMBERSHIP_TYPE AS "MEMBER TYPE",
       B.CATEGORY AS "BOOK CATEGORY",
       COUNT(*) AS "COUNT"
FROM MEMBER M, ISSUE I, BOOKS B
WHERE M.MEMBER_ID = I.MEMBER_ID
  AND I.BOOK_NO = B.BOOK_NO
GROUP BY M.MEMBERSHIP_TYPE, B.CATEGORY
ORDER BY M.MEMBERSHIP_TYPE, B.CATEGORY;


-- 40)
SELECT M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE, M.ACC_OPEN_DATE
FROM MEMBER M, ISSUE I
WHERE M.MEMBER_ID = I.MEMBER_ID
  AND M.MEMBERSHIP_TYPE = 'Lifetime'
  AND M.ACC_OPEN_DATE BETWEEN TO_DATE('01-JAN-2006','DD-MON-YYYY')
                          AND TO_DATE('31-DEC-2006','DD-MON-YYYY')
GROUP BY M.MEMBER_ID, M.MEMBER_NAME, M.MEMBERSHIP_TYPE, M.ACC_OPEN_DATE
HAVING COUNT(I.BOOK_NO) = 1;